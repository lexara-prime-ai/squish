%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2387 818
%%HiResBoundingBox: 0 0 2386.0798 817.91998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2386.0798 817.91998 re
W
q
[0.24 0 0 -0.24 0 817.91998] cm
q
0 0 9941.667 3405.5364 re
W*
q
[28.404739 0 0 28.405508 284.05139 284.05508] cm
8 0 m
102 0 l
102.262016 0 102.523399 0.012841 102.784149 0.038522 c
103.044891 0.064204 103.303749 0.102602 103.560722 0.153718 c
103.817703 0.204833 104.071556 0.26842 104.322281 0.344477 c
104.573006 0.420535 104.819405 0.508697 105.061462 0.608964 c
105.303528 0.709231 105.540092 0.821119 105.771164 0.94463 c
106.002243 1.068141 106.226707 1.202678 106.444557 1.348243 c
106.662415 1.493808 106.872604 1.649699 107.075142 1.815916 c
107.277679 1.982134 107.471581 2.157877 107.656845 2.343146 c
107.842117 2.528415 108.01786 2.722317 108.184074 2.924854 c
108.350296 3.12739 108.506187 3.337585 108.651741 3.555438 c
108.79731 3.773291 108.931847 3.997754 109.055359 4.228826 c
109.178871 4.459898 109.290756 4.696467 109.391022 4.938532 c
109.491295 5.180598 109.579453 5.426995 109.65551 5.677723 c
109.731567 5.928451 109.795158 6.182302 109.846268 6.439277 c
109.897392 6.696253 109.935799 6.955114 109.961479 7.215863 c
109.98716 7.476611 110 7.73799 110 8 c
110 92 l
110 92.262016 109.98716 92.523392 109.961472 92.784142 c
109.935799 93.044891 109.897392 93.303749 109.846268 93.560722 c
109.795158 93.817703 109.731575 94.071548 109.655518 94.322273 c
109.57946 94.572998 109.491295 94.819397 109.391022 95.061455 c
109.290756 95.303528 109.178871 95.5401 109.055359 95.771172 c
108.931847 96.002243 108.79731 96.2267 108.651749 96.44455 c
108.506187 96.662407 108.350304 96.872604 108.18409 97.075142 c
108.017868 97.277679 107.842117 97.471581 107.656845 97.656845 c
107.471581 97.84211 107.277672 98.017853 107.075134 98.184074 c
106.872597 98.350296 106.662407 98.506187 106.44455 98.651749 c
106.2267 98.797318 106.002235 98.931854 105.771164 99.055367 c
105.540092 99.178879 105.303528 99.290764 105.061455 99.391022 c
104.819397 99.491287 104.572998 99.579453 104.322266 99.65551 c
104.071541 99.731567 103.817696 99.795158 103.560715 99.846268 c
103.303749 99.897392 103.044891 99.935791 102.784142 99.961472 c
102.523392 99.98716 102.262016 100 102 100 c
8 100 l
7.73799 100 7.476611 99.98716 7.215863 99.961479 c
6.955114 99.935799 6.696252 99.8974 6.439277 99.846275 c
6.182301 99.795158 5.92845 99.731567 5.677723 99.65551 c
5.426995 99.579453 5.180598 99.491287 4.938532 99.391022 c
4.696467 99.290764 4.459898 99.178879 4.228826 99.055359 c
3.997754 98.931854 3.773291 98.797318 3.555438 98.651749 c
3.337585 98.506187 3.12739 98.350296 2.924854 98.184074 c
2.722317 98.017853 2.528415 97.84211 2.343146 97.656845 c
2.157877 97.471581 1.982134 97.277679 1.815916 97.075142 c
1.649699 96.872604 1.493808 96.662407 1.348243 96.44455 c
1.202678 96.2267 1.06814 96.002243 0.94463 95.771172 c
0.821119 95.5401 0.709231 95.303528 0.608964 95.061455 c
0.508697 94.819397 0.420535 94.572998 0.344477 94.322266 c
0.26842 94.071541 0.204833 93.817696 0.153718 93.560715 c
0.102602 93.303749 0.064204 93.044891 0.038522 92.784142 c
0.012841 92.523392 0 92.262016 0 92 c
0 8 l
0 7.73799 0.012841 7.476611 0.038522 7.215863 c
0.064204 6.955114 0.102602 6.696252 0.153718 6.439277 c
0.204833 6.182301 0.26842 5.92845 0.344477 5.677723 c
0.420535 5.426995 0.508697 5.180598 0.608964 4.938532 c
0.709231 4.696467 0.821119 4.459898 0.94463 4.228826 c
1.068141 3.997754 1.202678 3.773291 1.348243 3.555438 c
1.493808 3.337585 1.649699 3.12739 1.815916 2.924854 c
1.982134 2.722317 2.157877 2.528415 2.343146 2.343146 c
2.528415 2.157877 2.722317 1.982134 2.924854 1.815916 c
3.12739 1.649699 3.337585 1.493808 3.555438 1.348243 c
3.773291 1.202678 3.997754 1.06814 4.228826 0.94463 c
4.459898 0.821119 4.696467 0.709231 4.938532 0.608964 c
5.180598 0.508697 5.426995 0.420535 5.677723 0.344477 c
5.928451 0.26842 6.182302 0.204833 6.439277 0.153718 c
6.696253 0.102602 6.955114 0.064204 7.215863 0.038522 c
7.476611 0.012841 7.73799 0 8 0 c
h
f
Q
q
[22.2216 0 0 22.2222 731.64777 594.58221] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
56.799999 46.599998 m
59.299999 49.099998 l
80.900002 27.999998 l
81.599998 27.299997 82.5 26.799997 83.5 26.499998 c
81.800003 26.199999 80.199997 25.499998 78.599998 24.599998 c
76.099998 23.099998 74.099998 21.099998 72.900002 18.999998 c
72.900002 20.599998 72.200005 22.299997 70.900002 23.499998 c
49.200001 43.900002 l
54.299999 49 l
56.799999 46.599998 l
h
f
49 54.299999 m
43.700001 49 l
22 69.5 l
21.200001 70.300003 20.200001 70.800003 19.1 71 c
20.6 71.400002 22.200001 72 23.6 72.900002 c
26.6 74.599998 29 77.099998 30.299999 79.800003 c
30.299999 78.200005 31 76.600006 32.099998 75.5 c
48.899998 59.099998 l
46.599998 56.799999 l
49 54.299999 l
h
f
23.4 73.300003 m
20.799999 71.800003 17.9 71 15.2 71 c
11.7 71 8.9 72.400002 7.6 74.699997 c
4.6 79.899994 4.7 85.599998 7.9 88.699997 c
14 78.199997 l
14.1 78.199997 l
15.8 77.899994 18 78.399994 19.900002 79.5 c
21.800001 80.599998 23.200001 82.199997 23.900002 83.900002 c
23.900002 84 l
17.800001 94.5 l
18.500002 94.699997 19.200001 94.800003 19.900002 94.800003 c
23.700001 94.800003 27.600002 92.100006 30.100002 87.800003 c
31.300003 85.700005 31.300003 83.100006 30.000002 80.400002 c
28.700001 77.5 26.4 75.099998 23.4 73.300003 c
h
f
78.800003 24.1 m
81.100006 25.4 83.700005 26.200001 86 26.200001 c
89.099998 26.200001 91.5 25 92.699997 22.900002 c
92.899994 22.600002 93 22.300001 93.199997 22.000002 c
95.399994 17.700001 95.099998 13.100002 92.5 10.500002 c
87.199997 19.700001 l
87.099998 19.700001 l
86.799995 19.800001 86.5 19.800001 86.099998 19.800001 c
84.799995 19.800001 83.299995 19.400002 82 18.6 c
80.300003 17.6 79 16.200001 78.5 14.700001 c
78.5 14.6 l
83.800003 5.400001 l
83.200005 5.200001 82.600006 5.200001 82 5.200001 c
78.599998 5.200001 75.199997 7.600001 73 11.400001 c
70.699997 15.3 73.300003 20.9 78.800003 24.1 c
h
f
51.700001 51.700001 m
54 49.400002 l
13.5 8.9 l
13.3 8.8 l
13.3 13.6 l
5.7 6.1 l
8.9 13.5 l
49.400002 54 l
51.700001 51.700001 l
h
f
12.8 8.6 m
6.1 5.7 l
12.8 12.4 l
12.8 8.6 l
h
f
76.900002 65 m
75.700005 63.799999 74.300003 62.799999 72.800003 62.099998 c
62.400002 57.299999 l
61.800003 57 61.200001 56.599998 60.700001 56.099998 c
59.599998 55 59 53.5 59 52 c
59 49.5 l
56.799999 47.299999 l
47.299999 56.799999 l
49.5 59 l
52 59 l
53.599998 59 55.099998 59.599998 56.200001 60.700001 c
56.700001 61.200001 57.100002 61.799999 57.400002 62.400002 c
62.200001 72.800003 l
62.900002 74.300003 63.900002 75.700005 65.099998 76.900002 c
80.5 92.300003 l
82 93.800003 84.099998 94.700005 86.300003 94.700005 c
86.700005 94.700005 l
88.900002 94.700005 90.900002 93.900002 92.500008 92.300003 c
94.000008 90.800003 94.900009 88.700005 94.900009 86.5 c
94.900009 86.099998 l
94.900009 83.900002 94.100006 81.900002 92.500008 80.299995 c
76.900002 65 l
h
f
Q
q
[44.106731 0 0 44.107929 3891.9827 441.43216] cm
13.4 40.400002 m
9.599999 40.400002 6 39.200001 2.879999 36.880001 c
2.319999 36.48 1.919999 35.799999 1.919999 35 c
1.919999 33.720001 2.959999 32.720001 4.239999 32.720001 c
4.919999 32.720001 5.359999 32.920002 5.679999 33.16 c
7.999999 35 10.48 36.040001 13.519999 36.040001 c
16.559998 36.040001 18.48 34.600002 18.48 32.52 c
18.48 32.439999 l
18.48 30.439999 17.359999 29.359999 12.16 28.159998 c
6.2 26.719997 2.84 24.959997 2.84 19.799999 c
2.84 19.719999 l
2.84 14.919999 6.84 11.599999 12.400001 11.599999 c
15.92 11.599999 18.76 12.52 21.280001 14.199999 c
21.84 14.519999 22.360001 15.199999 22.360001 16.16 c
22.360001 17.440001 21.32 18.440001 20.040001 18.440001 c
19.560001 18.440001 19.160002 18.32 18.76 18.08 c
16.6 16.68 14.520001 15.96 12.32 15.96 c
9.44 15.96 7.76 17.440001 7.76 19.280001 c
7.76 19.360001 l
7.76 21.52 9.04 22.48 14.44 23.76 c
20.360001 25.200001 23.4 27.32 23.4 31.959999 c
23.4 32.040001 l
23.4 37.279999 19.279999 40.400002 13.4 40.400002 c
h
49.400002 21.08 m
49.400002 44.200001 l
49.400002 45.560001 48.32 46.600002 47 46.600002 c
45.639999 46.600002 44.560001 45.560001 44.560001 44.200001 c
44.560001 36.48 l
43 38.68 40.800003 40.439999 37.360001 40.439999 c
32.400002 40.439999 27.560001 36.48 27.560001 29.48 c
27.560001 29.4 l
27.560001 22.4 32.32 18.439999 37.360001 18.439999 c
40.84 18.439999 43.040001 20.159998 44.560001 22.159998 c
44.560001 21.039997 l
44.560001 19.719997 45.640003 18.639997 46.960003 18.639997 c
48.320004 18.639997 49.400002 19.719997 49.400002 21.079998 c
49.400002 21.08 l
h
38.52 22.639999 m
35.200001 22.639999 32.440002 25.199999 32.440002 29.4 c
32.440002 29.48 l
32.440002 33.559998 35.240002 36.239998 38.520004 36.239998 c
41.760006 36.239998 44.640003 33.519997 44.640003 29.479998 c
44.640003 29.399998 l
44.640003 25.319998 41.760002 22.639997 38.520004 22.639997 c
38.52 22.639999 l
h
74.239998 21.08 m
74.239998 37.799999 l
74.239998 39.119999 73.159996 40.200001 71.799995 40.200001 c
70.479996 40.200001 69.359993 39.16 69.359993 37.799999 c
69.359993 36.719997 l
67.999992 38.719997 66.039993 40.439999 62.759995 40.439999 c
57.999992 40.439999 55.239994 37.239998 55.239994 32.32 c
55.239994 21.08 l
55.239994 19.719999 56.319996 18.639999 57.639996 18.639999 c
58.999996 18.639999 60.079994 19.719999 60.079994 21.08 c
60.079994 30.880001 l
60.079994 34.16 61.719994 36 64.599991 36 c
67.399994 36 69.359993 34.080002 69.359993 30.799999 c
69.359993 21.079998 l
69.359993 19.719997 70.439995 18.639997 71.799995 18.639997 c
73.119995 18.639997 74.239998 19.719997 74.239998 21.079998 c
74.239998 21.08 l
h
80.199997 13.44 m
80.199997 13.2 l
80.199997 11.76 81.399994 10.84 82.959999 10.84 c
84.520004 10.84 85.720001 11.76 85.720001 13.200001 c
85.720001 13.440001 l
85.720001 14.880001 84.520004 15.84 82.959999 15.84 c
81.399994 15.84 80.199997 14.88 80.199997 13.440001 c
80.199997 13.44 l
h
80.559998 37.799999 m
80.559998 21.08 l
80.559998 19.719999 81.599998 18.639999 82.959999 18.639999 c
84.32 18.639999 85.400002 19.719999 85.400002 21.08 c
85.400002 37.799999 l
85.400002 39.16 84.32 40.200001 82.959999 40.200001 c
81.639999 40.200001 80.559998 39.16 80.559998 37.799999 c
h
98.959999 40.400002 m
96.279999 40.400002 93.360001 39.560001 90.919998 37.880001 c
90.400002 37.600002 90 37 90 36.200001 c
90 35.119999 90.839996 34.240002 91.959999 34.240002 c
92.360001 34.240002 92.720001 34.360001 93 34.52 c
95.040001 35.880001 97.160004 36.560001 99.080002 36.560001 c
101.160004 36.560001 102.360001 35.68 102.360001 34.280003 c
102.360001 34.200001 l
102.360001 32.560001 100.120003 32 97.639999 31.240002 c
94.519997 30.360003 91.040001 29.080002 91.040001 25.040001 c
91.040001 24.960001 l
91.040001 20.960001 94.360001 18.52 98.559998 18.52 c
100.799995 18.52 103.159996 19.16 105.199997 20.24 c
105.879997 20.6 106.360001 21.24 106.360001 22.08 c
106.360001 23.200001 105.480003 24.040001 104.360001 24.040001 c
103.959999 24.040001 103.720001 23.960001 103.400002 23.800001 c
101.68 22.920002 99.919998 22.360001 98.440002 22.360001 c
96.560005 22.360001 95.480003 23.24 95.480003 24.440001 c
95.480003 24.52 l
95.480003 26.08 97.760002 26.720001 100.240005 27.52 c
103.320007 28.48 106.800003 29.880001 106.800003 33.68 c
106.800003 33.760002 l
106.800003 38.200001 103.360001 40.400002 98.960007 40.400002 c
98.959999 40.400002 l
h
111.760002 37.799999 m
111.760002 13 l
111.760002 11.68 112.800003 10.6 114.160004 10.6 c
115.520004 10.6 116.600006 11.68 116.600006 13 c
116.600006 22.119999 l
117.960007 20.16 119.920006 18.439999 123.200005 18.439999 c
127.960007 18.439999 130.720001 21.639999 130.720001 26.519999 c
130.720001 37.799999 l
130.720001 39.16 129.680008 40.200001 128.320007 40.200001 c
126.960007 40.200001 125.880005 39.16 125.880005 37.799999 c
125.880005 28 l
125.880005 24.719999 124.240005 22.84 121.360008 22.84 c
118.560005 22.84 116.600006 24.799999 116.600006 28.08 c
116.600006 37.799999 l
116.600006 39.16 115.520004 40.200001 114.160004 40.200001 c
112.840004 40.200001 111.760002 39.16 111.760002 37.799999 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
